buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.3.0'
    }
}

plugins {
    id 'nebula.netflixoss' version '5.0.0'
    id 'me.champeau.gradle.jmh' version '0.4.5'
    id 'net.saliman.cobertura' version '2.5.4'
}

wrapper {
    gradleVersion = '4.8'
    distributionType = Wrapper.DistributionType.ALL
}

ext {
    githubProjectName = rootProject.name

    aspectjVersion = '1.8.13'
    jacksonVersion = '2.9.4'
    jerseyVersion = '2.26'
    jmhVersion = '1.20'
    slf4jVersion = '1.7.25'
    springframeworkVesion = '4.3.14.RELEASE'
    libraries = [
        archaiusCore: 'com.netflix.archaius:archaius-core:0.7.6',
        asm: 'org.ow2.asm:asm:6.0',
        aspectjrt: "org.aspectj:aspectjrt:$aspectjVersion",
        aspectjtools: "org.aspectj:aspectjtools:$aspectjVersion",
        aspectjweaver: "org.aspectj:aspectjweaver:$aspectjVersion",
        cglib: 'cglib:cglib:3.2.6',
        clojure: 'org.clojure:clojure:1.9.0',
        commonsLang: 'org.apache.commons:commons-lang3:3.7',
        easymock: 'org.easymock:easymock:3.5.1',
        guava: 'com.google.guava:guava:24.0-jre',
        jacksonAnnotations: "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
        jacksonCore: "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
        jacksonDatabind: "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
        jacksonModuleAfterburner: "com.fasterxml.jackson.module:jackson-module-afterburner:$jacksonVersion",
        javassist: 'org.javassist:javassist:3.22.0-GA',
        javaxWsRsApi: 'javax.ws.rs:javax.ws.rs-api:2.1',
        jerseyHk2: "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion",
        jerseyMediaSse: "org.glassfish.jersey.media:jersey-media-sse:$jerseyVersion",
        jerseyTestFramewokrProviderGrizzly: "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion",
        jsr305: 'com.google.code.findbugs:jsr305:3.0.2',
        junit: 'junit:junit:4.12',
        junitDataprovider: 'com.tngtech.java:junit-dataprovider:1.13.1',
        junitparams: 'pl.pragmatists:JUnitParams:1.1.1',
        log4j: 'log4j:log4j:1.2.17',
        mockitoCore: 'org.mockito:mockito-core:2.15.0',
        powermockEasymockReleaseFull: 'org.powermock:powermock-easymock-release-full:1.6.4',
        rxjava: 'io.reactivex:rxjava:1.3.6',
        rxnetty: 'io.reactivex:rxnetty:0.5.1',
        servletApi: 'javax.servlet:javax.servlet-api:4.0.0',
        servoCore: 'com.netflix.servo:servo-core:0.12.20',
        slf4jApi: "org.slf4j:slf4j-api:$slf4jVersion",
        slf4jLog4j: "org.slf4j:slf4j-log4j12:$slf4jVersion",
        springAop: "org.springframework:spring-aop:$springframeworkVesion",
        springCore: "org.springframework:spring-core:$springframeworkVesion",
        springContext: "org.springframework:spring-context:$springframeworkVesion",
        springTest: "org.springframework:spring-test:$springframeworkVesion",
        toolsNrepl: 'org.clojure:tools.nrepl:0.2.13',
    ]
}

allprojects {
    repositories {
        jcenter()
    }

    apply plugin: 'net.saliman.cobertura'
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
	apply plugin: 'nebula.compile-api'
	
    sourceCompatibility = 1.8
    targetCompatibility = 1.8



    group = "com.javathinker.${githubProjectName}"

    eclipse {
        classpath {
            downloadSources = true
            downloadJavadoc = true
        }
    }

    idea {
        module {
        }
    }
}
